const float PI=3.14159265;

float iTime=1.7360450000269338;
vec3 iResolution=vec3(512,288,1);

extern"C"{
    float cos(float x);
    float sin(float x);
    float floor(float x);
    float pow(float x,float y);
    void mainImage(out vec4 fragColor,in vec2 fragCoord);
}

float mod(float x,float y){
    return x-float(int(x/y))*y;
}

vec2 floor(vec2 x){
    vec2 ans;
    for(int i=0;i<2;++i)ans[i]=floor(x[i]);
    return ans;
}

vec3 floor(vec3 x){
    vec3 ans;
    for(int i=0;i<3;++i)ans[i]=floor(x[i]);
    return ans;
}

float fract(float x){
    return x-floor(x);
}

vec3 fract(vec3 x){
    return x-floor(x);
}

vec3 step(vec3 edge,vec3 x){
    vec3 ans;
    for(int i=0;i<3;++i)ans[i]=float(edge[i]<=x[i]);
    return ans;
}

float dot(vec2 x,vec2 y){
    vec2 z=x*y;
    return z[0]+z[1];
}

float dot(vec3 x,vec3 y){
    vec3 z=x*y;
    return z[0]+z[1]+z[2];
}

float dot(vec4 x,vec4 y){
    vec4 z=x*y;
    return z[0]+z[1]+z[2]+z[3];
}

float min(float x,float y){
    return x<y?x:y;
}

vec4 max(vec4 x,float y){
    vec4 ans;
    for(int i=0;i<4;++i)ans[i]=x[i]>y?x[i]:y;
    return ans;
}

float clamp(float x,float l,float r){
    if(x<l)x=l;
    else if(x>r)x=r;
    return x;
}

vec2 mix(vec2 x,vec2 y,float a){
    return x*(1.-a)+y*a;
}

vec3 mix(vec3 x,vec3 y,float a){
    return x*(1.-a)+y*a;
}

float length(vec2 x){
    return pow(pow(x.x,2.)+pow(x.y,2.),.5);
}

float smoothstep(float l,float r,float x){
    float t;
    t=clamp((x-l)/(r-l),0.,1.);
    return t*t*(3.-2.*t);
}

vec3 pikachuText(int idx_x,int idx_y,vec3 col){
    const vec3[7]colors=vec3[7](vec3(1.,.847,.145),vec3(.165,.165,.149),vec3(.917,.314,.145),vec3(.980,.980,.980),vec3(.753,.435,.157),vec3(.902,.666,.180),vec3(.764,.259,.090));
    int idx=idx_y*128+idx_x;
    uint off=uint(idx%10);
    uint pos=uint(idx/10);
    int index;
    if(pos>=0u&&pos<128u){
        const int[128]indexv=int[128](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,524288,0,0,0,0,0,0,0,0,0,0,0,0,74752,0,0,0,0,0,0,0,0,0,0,0,0,1170,0,0,0,0,0,0,0,0,0,0,0,306184192,18,0,0,0,0,0,0,0,0,0,0,0,306782208,0,0,0,0,0,0,0,0,0,0,0,0,4793488,0,0,0,0,0,0,0,0,0,0,0,301989888,74898,0,0,0,0,0,0,0,0,0,0,0,306774016,1170,0,0,0,0,0,0,0,0,0,0,0,306783360,18,0,0,0,0,0,0,0,0);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=128u&&pos<256u){
        const int[128]indexv=int[128](0,0,268435456,306783378,0,0,0,0,0,0,0,0,0,0,0,306708480,4793490,0,0,0,0,0,0,0,0,0,0,0,306782208,74898,0,0,0,0,0,0,134217728,153391689,0,0,0,306783376,1170,0,0,0,0,0,0,153391680,153391689,0,0,268435456,306783378,18,0,0,0,0,0,153391680,153391689,19173961,0,0,306708480,287610002,0,0,0,0,0,153391104,153391689,153391689,299593,0,0,306782208,2396745,0,0,0,0,150994944,153391689,153391689,153391689,4681,0,0,153429136,37449,0,0,0,0,153391688,153391689,153391689,153391689,9,0,268435456,153391698,585,0,0,0,153387008,153391689,153391689,153391689,153391689,0,0,172490752,153391689,9,0,0,0,153391689,153391689,153391689,153391689,299593);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=256u&&pos<384u){
        const int[128]indexv=int[128](0,0,153427968,153391689,0,0,0,153387008,153391689,153391689,153391689,153391689,4681,0,0,153391760,299593,0,0,0,153391689,153391689,153391689,153391689,153391689,9,0,268435456,153391689,4681,0,0,153387008,153391689,153391689,153391689,153391689,153391689,0,0,153092096,153391689,9,0,0,153391689,153391689,153391689,153391689,153391689,299593,0,0,153391104,153391689,0,0,153092096,153391689,153391689,153391689,153391689,153391689,4681,0,0,153391680,2396745,0,0,153387008,153391689,153391689,153391689,153391689,153391689,9,0,0,153391689,4681,0,0,153391616,153391689,153391689,153391689,153391689,153391689,0,0,153092096,153391689,73,0,0,165375360,153391689,153391689,153391689,153391689,299593,0,0,153387008,153391689,0,0,0,920350128,165375414,153391689,153391689,153391689,4681,0,0,153391616,2396745,0,0,0,920350134,920350134,153391734,153391689,153391689,9);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=384u&&pos<512u){
        const int[128]indexv=int[128](0,0,153391688,4681,0,0,805306368,920350134,153415094,306782793,153391690,153391689,0,0,134217728,153391689,73,0,0,905969664,920350134,153391689,306783305,153391698,299593,0,0,153354240,824480329,6,0,0,918552576,153415094,153391689,306783377,153391698,4681,0,0,153391104,14193225,0,0,0,920125440,153391694,287609417,306783378,153391734,9,0,0,153391680,224329,0,0,0,153550848,153391689,306745929,910763154,153391734,0,0,0,153391689,153354673,153391689,0,0,153391680,153391689,306782793,920331410,299638,0,0,150994944,908366409,153391689,153391689,73,150994944,153391689,153391689,306783377,920350098,4726,0,0,153354240,154866249,153391689,153391689,585,153391104,153391689,287609417,910763154,920350134,118,0,0,153391104,153394249,153391689,153391689,37449,153391689,153391689,306745929,920347794,920350134,0,0,0,153391680,153391689,153391689,153391689,153391689,153391689,153391689,306783305,918577152,224694,0);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=512u&&pos<640u){
        const int[128]indexv=int[128](0,0,153391689,153391689,153391689,153391689,153391689,153391689,153391689,74898,0,0,0,0,150994944,153391689,153391689,153391689,153391689,153391689,153391689,306483785,18,0,0,0,0,153354240,153391689,153391689,153391689,153391689,153391689,153391689,709435977,0,0,0,0,0,153391104,153391689,153391689,153391689,153391689,153391689,918852169,14328982,0,0,0,0,0,153391680,153391689,153391689,153391689,153391689,153391689,383479177,1797554,0,0,0,0,134217728,153391689,153391689,153391689,153391689,153391689,920326729,920350134,224694,0,0,0,0,153092096,153391689,153391689,153391689,153391689,920162889,115043766,920349696,28086,0,0,0,0,153387008,153391689,153391689,153391689,153391689,920162889,805306806,920350134,3510,0,0,0,0,153391680,153391689,153391689,153391689,153391689,920326729,920350134,920350134,54,0,0,0,0,153391689,153391689,153391689,153391689,153391689,920347209,920350134,920350134,6,0,0);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=640u&&pos<768u){
        const int[128]indexv=int[128](0,150994944,153391689,153391689,153391689,153391689,153391689,920350089,920350134,115043766,0,0,0,0,153354240,153391689,153391689,153391689,153391689,153391689,920350129,920350134,1797558,0,0,0,0,153391616,153391689,153391689,153391689,153391689,824480329,920350134,920350134,3510,0,0,0,0,153391688,153391689,153391689,153391689,153391689,918852169,920350134,14380470,0,0,0,0,134217728,153391689,153391689,153391689,153391689,153391689,918229577,1797558,0,0,0,0,0,153092096,153391689,153391689,153391689,153391689,153391689,920052297,28086,0,0,0,0,0,153387008,153391689,153391689,153391689,153391689,153391689,920313225,3510,0,0,0,0,0,153391616,153391689,153391689,153391689,153391689,153391689,920345462,438,0,0,0,0,0,153391689,153391689,153391689,153391689,153391689,908366409,920349550,46,0,0,0,0,150994944,153391689,153391689,153391689,153391689,153391689,784634441,903535981,5,0,0,0);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=768u&&pos<896u){
        const int[128]indexv=int[128](0,153354240,153391689,153391689,153391689,153391689,153391689,758846025,766991221,0,0,0,0,0,153391104,153391689,153391689,153391689,153391689,153391689,901049417,95869806,0,0,0,0,0,153391680,153391689,153391689,153391689,153391689,153391689,699847601,11983725,0,0,0,0,0,304386633,153391716,153391689,153391689,153396401,824480329,768006734,187245,0,0,0,0,150994944,612962889,153391692,153391689,606376521,153396372,247763529,766810985,2925,0,0,0,0,153354240,613557385,153391689,153391689,613552713,153391762,691737161,95867757,0,0,0,0,0,153391616,160580754,153391689,153391689,311576713,153391698,765783113,2893,0,0,0,0,0,304386632,153503890,153391689,153391689,306858274,153391689,229938097,365,0,0,0,0,134217728,306745929,153392274,153391689,304386633,155788580,824480329,758567502,5,0,0,0,0,153354240,306782793,153391698,153391689,307794505,153429138,247763529,765778761,0,0,0,0);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=896u&&pos<1024u){
        const int[128]indexv=int[128](0,153464832,172565577,153391689,153391689,306778697,153392274,154866249,11965289,0,0,0,0,0,153466560,153429129,153391689,153391689,306782793,153391690,690285961,1497673,0,0,0,0,402653184,153401051,153391689,153396297,153391689,155788361,191730249,153392054,27465,0,0,0,0,459276288,153392859,153391689,153392265,153391689,153391689,917354201,153391694,109,0,0,0,0,460161024,153391707,153391689,153391689,153391689,455381577,165131995,757371465,9,0,0,0,0,460174848,153391691,153391689,153391689,153391689,460165705,153583323,162828873,0,0,0,0,0,191739608,153391689,153391689,153391689,153391689,460175049,153394683,2413129,0,0,0,0,402653184,158185179,153391689,153391689,153391689,153391689,997045979,153391735,299849,0,0,0,0,452984832,153466587,153391689,153391689,153391689,459575881,268285659,153391689,4681,0,0,0,0,460062720,153392859,287609417,153391698,153391689,460165705,154662619,153391689,73,0,0,0);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=1024u&&pos<1152u){
        const int[128]indexv=int[128](0,460173312,153391707,766022217,153391698,153391689,460174921,153415675,153391689,1,0,0,0,0,460174912,153391689,690410569,153391698,153391689,997045977,153391743,19173961,0,0,0,0,0,158185177,153391689,690262634,153391698,421827145,939374299,153391689,2396745,0,0,0,0,153092096,153466587,153391689,153391689,153391690,459575881,154662619,153391689,37449,0,0,0,0,421826560,153391835,153391689,153391689,153391689,460100169,153415675,153391689,585,0,0,0,0,455381568,153391689,153391689,153391689,153391689,1064153673,153391727,153391689,9,0,0,0,134217728,153391689,153391689,153391689,153391689,153391689,234862153,153391689,824480329,0,0,0,0,153092096,153391689,153391689,153391689,153391689,153391689,154852233,153391689,12882505,0,0,0,0,153391104,153391689,153391689,153391689,153391689,153391689,153392054,824480329,221769,0,0,0,0,153391680,153391689,153391689,153391689,153391689,918852169,153391694,247763529,3465,0,0,0);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=1152u&&pos<1280u){
        const int[128]indexv=int[128](134217728,153391689,153391689,153391689,153391689,153391689,165372489,153391689,825791049,54,0,0,0,153092096,153391689,153391734,153391689,153391689,153391689,153415089,153391689,920347209,0,0,0,0,153391104,824480329,153391694,153391689,153391689,908366409,153392054,153391689,14380105,0,0,0,0,153391680,908366409,153391694,153391689,153391689,920326729,153391689,153391689,224689,0,0,0,134217728,153391689,918852169,153391694,153391689,153391689,154889649,153391689,824480329,438,0,0,0,153092096,153391689,920162889,153391694,153391689,918852169,153394614,153391689,918852169,6,0,0,0,153391104,153391689,920347209,153391734,153391689,920350089,153391694,153391689,114856521,0,0,0,0,153391680,153391689,920349769,153392054,918852169,165375414,153391689,153391689,1794633,0,0,0,134217728,153391689,153391689,920350089,920350134,920350134,153415094,153391689,153391689,3465,0,0,0,153092096,153391689,153391689,920350134,920350134,920350134,153391734,153391689,153391689,54,0,0,0);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=1280u&&pos<1408u){
        const int[128]indexv=int[128](153391104,153391689,824480329,920350134,920350134,920350134,153391689,153391689,908366409,0,0,0,0,153391680,153391689,918852169,920350134,920350134,249261494,153391689,153391689,14193225,0,0,0,0,153391689,153391689,920326729,920350134,920350134,154889654,153391689,153391689,1794633,0,0,0,153092096,153391689,153391689,920350089,920350134,920350134,153578934,153391689,153391689,28041,0,0,0,153387008,153391689,153391689,920350134,920350134,920350134,153415094,153391689,153391689,438,0,0,0,153391616,153391689,918852169,920350134,920350134,920350134,153392054,153391689,908366409,1,0,0,0,153391689,153391689,918553161,920350134,920350134,920350134,153391734,153391689,154702409,0,0,0,150994944,153391689,153391689,920125441,920350134,438,0,153391688,153391689,2417225,0,0,0,153354240,153391689,2396745,920326656,920350134,0,0,153391689,153391689,37769,0,0,0,153391104,153391689,4681,920326729,1797558,0,150994944,153391689,153391689,585,0,0,0);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(pos>=1408u&&pos<1536u){
        const int[128]indexv=int[128](153391688,153391689,153092105,920162889,3510,0,153092096,153391689,153391689,9,0,0,134217728,153391689,19173961,153391104,920162889,6,0,153354240,153391689,153391689,0,0,0,153092096,153391689,37449,153391680,1774153,0,0,153387008,153391689,2396745,0,0,0,153387008,153391689,73,153391689,585,0,0,153391104,153391689,37449,0,0,0,153391104,153391689,150994944,153391689,0,0,0,153391616,153391689,585,0,0,0,153391616,37449,153092096,37449,0,0,0,153391680,153391689,1,0,0,0,153391616,9,153354240,9,0,0,0,153391688,19173961,0,0,0,0,0,0,0,0,0,0,0,153391689,37449,0,0,0,0,0,0,0,0,0,0,134217728,153391689,73,0,0,0,0,0,0,0,0,0,0,134217728,153391689,0,0,0,0);
    index=(indexv[pos%128u]>>(3u*off))&7;}
    if(index==0)return col;
    else return colors[index-1];
}

// Adds pikachu to the image
vec3 addPikachu(vec2 uv,vec3 bg){
    float screenRatio=iResolution.x/iResolution.y;
    const vec2 picDim=vec2(128.,120.);
    const float bTop=.5;
    float bLeft=.55-.5*bTop*picDim.x/(picDim.y*screenRatio);
    float bRight=.55+.5*bTop*picDim.x/(picDim.y*screenRatio);
    if(uv.x<bLeft||uv.x>bRight||uv.y>bTop)
    return bg;
    
    int idx_x=int(picDim.x*(uv.x-bLeft)/(bRight-bLeft));
    int idx_y=int(picDim.y*(bTop-uv.y)/bTop);
    
    return pikachuText(idx_x,idx_y,bg);
}

// Finds a vector normal to the given vector
vec2 vnorm(in vec2 v){
    return vec2(v.y,-v.x);
}

// Moves the points according to time and the id of the line
vec2 getOffset(vec2 pos,vec2 posParent,vec2 offsetParent,int i){
    float rMag=i<5?.1:.04;
    float lMag=i<5?.04:.01;
    float period=.25+.05*mod(float(i),3.);
    float tShift=iTime-1.3*float(i);
    
    vec2 rOffset=rMag*.666*floor(1.5*cos(7.*float(i)+tShift/period)
    *vnorm(pos-posParent-offsetParent));
    vec2 lOffset=lMag*.666*floor(1.5*cos(11.*float(i)+tShift/period)
    *(pos-posParent-offsetParent));
    return offsetParent+rOffset+lOffset;
}

// Returns the lines that make the lightning
const int nbVertices=25;
const int nbLines=nbVertices-1;
vec4[nbLines]getLines(){
    const vec2[nbVertices]vertices=vec2[](
        vec2(.5,.1),vec2(.2,.3),vec2(.32,.5),
        vec2(.51,.55),vec2(.75,.51),vec2(.8,.2),
        vec2(-.05,.15),vec2(-.15,.35),vec2(.1,.6),
        vec2(.25,.7),vec2(-.1,.5),vec2(-.1,.8),
        vec2(.17,1.1),vec2(.3,1.1),vec2(.45,.69),
        vec2(.59,.83),vec2(.48,1.15),vec2(.8,1.15),
        vec2(.79,.79),vec2(.94,1.2),vec2(1.03,1.07),
        vec2(1.1,.63),vec2(.93,.31),vec2(1.15,.1),
        vec2(1.1,.28)
    );
    const ivec2[nbLines]lines=ivec2[nbLines](
        ivec2(0,1),ivec2(0,2),ivec2(0,3),ivec2(0,4),
        ivec2(0,5),ivec2(1,6),ivec2(1,7),ivec2(2,8),
        ivec2(2,9),ivec2(8,10),ivec2(8,11),ivec2(9,12),
        ivec2(9,13),ivec2(3,14),ivec2(3,15),ivec2(14,16),
        ivec2(15,17),ivec2(4,18),ivec2(18,19),ivec2(18,20),
        ivec2(4,21),ivec2(5,22),ivec2(5,23),ivec2(22,24)
    );
    vec2[nbVertices]offsets;
    offsets[0]=vec2(0.,0.);
    for(int i=0;i<nbLines;++i){
        offsets[lines[i].y]=getOffset(vertices[lines[i].y],
            vertices[lines[i].x],
        offsets[lines[i].x],i);
    }
    vec4[nbLines]verticeLines;
    for(int i=0;i<nbLines;++i){
        verticeLines[i]=vec4(vertices[lines[i].x]+offsets[lines[i].x],
        vertices[lines[i].y]+offsets[lines[i].y]);
    }
    return verticeLines;
}

// Returns the lines that make Pikachu
const int nbPkVertices=5;
const int nbPkLines=5;
vec4[nbPkLines]getPkLines(){
    const vec2[nbPkVertices]vertices=vec2[nbPkVertices](
        vec2(.43,.08),vec2(.48,.3),vec2(.54,.29),
        vec2(.59,.18),vec2(.59,.07)
    );
    const ivec2[nbPkLines]lines=ivec2[nbPkLines](
        ivec2(0,1),ivec2(1,2),ivec2(2,3),ivec2(3,4),ivec2(4,0)
    );
    vec4[nbPkLines]verticeLines;
    for(int i=0;i<nbPkLines;++i){
        verticeLines[i]=vec4(vertices[lines[i].x],vertices[lines[i].y]);
    }
    return verticeLines;
}

// From https://www.shadertoy.com/view/4sc3z2
// and https://www.shadertoy.com/view/XsX3zB
const vec3 MOD3=vec3(.1031,.11369,.13787);
vec3 hash33(vec3 p3)
{
    p3=fract(p3*MOD3);
    p3+=dot(p3,p3.yxz+19.19);
    return-1.+2.*fract(vec3((p3.x+p3.y)*p3.z,(p3.x+p3.z)*p3.y,(p3.y+p3.z)*p3.x));
}
float simplexNoise(vec3 p)
{
    const float K1=.333333333;
    const float K2=.166666667;
    
    vec3 i=floor(p+(p.x+p.y+p.z)*K1);
    vec3 d0=p-(i-(i.x+i.y+i.z)*K2);
    
    vec3 e=step(vec3(0.),d0-d0.yzx);
    vec3 i1=e*(1.-e.zxy);
    vec3 i2=1.-e.zxy*(1.-e);
    
    vec3 d1=d0-(i1-1.*K2);
    vec3 d2=d0-(i2-2.*K2);
    vec3 d3=d0-(1.-3.*K2);
    
    vec4 h=max(.6-vec4(dot(d0,d0),dot(d1,d1),dot(d2,d2),dot(d3,d3)),0.);
    vec4 n=h*h*h*h*vec4(dot(d0,hash33(i)),dot(d1,hash33(i+i1)),dot(d2,hash33(i+i2)),dot(d3,hash33(i+1.)));
    
    return dot(vec4(31.316),n);
}

// Creates the background texture
vec3 backgroundDefault(vec2 uv){
    return vec3(.25,.75,.5)+vec3(0.,-.05,.1)*simplexNoise(vec3(4.*uv,1.));
}

vec3 backgroundDark(vec2 uv){
    return vec3(.15,.5,.3)+vec3(0.,-.05,.1)*simplexNoise(vec3(4.*uv,1.));
}

float dot2(in vec2 v)
{
    return dot(v,v);
}

// Distance between p and the line from a to b
float lineDist(in vec2 p,in vec2 a,in vec2 b)
{
    vec2 adjRatio=vec2(1.,iResolution.y/iResolution.x);
    vec2 pp=vec2((p.x-.5)/(1.+.3*p.y)+.5,p.y);
    vec2 pa=(pp-a)*adjRatio,ba=(b-a)*adjRatio;
    float h=clamp(dot(pa,ba)/dot(ba,ba),0.,1.);
    float sdist=dot2(pa-ba*h);
    return sdist;
}

// Break the line according to the value of i
// and return the minimum distance between p and
// one of the sub-lines between a and b
float lineMultiDist(in vec2 p,in vec2 a,in vec2 b,in int i)
{
    float offset1=.4+.05*cos(5.*iTime+float(i+3));
    float offset2=.7+.05*cos(5.*iTime+float(i+5));
    float shift1=.02+.04*cos(5.*iTime+float(i));
    float shift2=-.02+.04*sin(5.*iTime+float(i));
    vec2[4]points=vec2[4](
        a,
        mix(a,b,offset1)+shift1*vnorm(b-a),
        mix(a,b,offset2)+shift2*vnorm(b-a),
        b
    );
    float dm=10.;
    for(int i=0;i<3;++i){
        dm=min(dm,lineDist(p,points[i],points[i+1]));
    }
    return dm;
}

void mainImage(out vec4 fragColor,in vec2 fragCoord)
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv=fragCoord/iResolution.xy;
    float noiseMicro=simplexNoise(vec3(20.*uv,floor(iTime*10.)));
    float noiseMacro=simplexNoise(vec3(5.*uv,iTime));
    vec2 uv_o=uv+.007*vec2(noiseMicro,noiseMicro)+.02*vec2(noiseMacro,noiseMacro);
    float blink=fract(iTime*4.);
    float negblink=1.-blink;
    if(fract(iTime*.6)<.5)
    uv_o=vec2(1.-uv_o.x,uv_o.y);
    
    // Background color
    vec3 col=mix(backgroundDark(uv),backgroundDefault(uv),smoothstep(.45,.55,blink));
    
    // Pikachu contour
    vec4[nbPkLines]pkLines=getPkLines();
    float di=10.;
    for(int i=0;i<nbPkLines;++i){
        di=min(di,lineDist(uv,pkLines[i].xy,pkLines[i].zw));
    }
    di/=(1.+.2*cos(2.*iTime)+.05*cos(15.*iTime));
    float ampl=1./(1.+3.*length(uv-vec2(.5,.1)));
    col=mix(col,vec3(1.,.9,.6),(.6*blink+.4)*.8*(1.-smoothstep(0.,.02,di*ampl)));
    ampl=1./(1.+3.*length(uv-vec2(.5,.1)));
    col=mix(col,vec3(1.,.95,.6),(.7*blink+.3)*(1.-smoothstep(0.,.002,di*ampl)));
    
    // Thunderbolts
    vec4[nbLines]lines=getLines();
    di=10.;
    for(int i=0;i<nbLines;++i){
        di=min(di,lineMultiDist(uv_o,lines[i].xy,lines[i].zw,i));
    }
    if(blink>.5)
    {
        ampl=1./(1.+3.*length(uv-vec2(.5,.1)));
        col=mix(col,vec3(1.,.9,.4),1.-smoothstep(.000002,.00008,di*ampl));
        col=mix(col,vec3(1.,1.,.7),1.-smoothstep(.000002,.00001,di*ampl));
    }
    
    // Adding pikachu
    col=addPikachu(uv,col);
    
    // Flickering effect
    
    // Vignetting
    col*=pow(20.*uv.x*uv.y*(1.-uv.x)*(1.-uv.y),.07);
    
    // Output to screen
    fragColor=vec4(col,1.);
}
